

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: nginx              # set this to your Amazon ECR repository name
  ECS_SERVICE: Alter                  # set this to your Amazon ECS service name
  ECS_CLUSTER: ECS_07                       # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: nginx         # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: nginx          # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Retrieve the latest NGINX image tag
        id: ecr
        run: |
          LATEST_IMAGE_TAG=$(aws ecr describe-images --repository-name nginx --query 'sort_by(imageDetails, &imagePushedAt)[-1].imageTags[0]' --output text)
          echo "LATEST_IMAGE_TAG=${LATEST_IMAGE_TAG}" >> $GITHUB_ENV

    - name: Get the current task definition
        run: |
          aws ecs describe-task-definition --task-definition nginx > task-definition.json

    - name: Clean and update the task definition JSON
        run: |
          IMAGE_URI="nginx:${{ env.LATEST_IMAGE_TAG }}"
          jq --arg IMAGE_URI "$IMAGE_URI" '
            .taskDefinition |
            {family, taskRoleArn, executionRoleArn, networkMode, containerDefinitions, volumes, placementConstraints, requiresCompatibilities, cpu, memory, tags, pidMode, ipcMode, proxyConfiguration, inferenceAccelerators, ephemeralStorage, runtimePlatform} |
            .containerDefinitions[0].image = $IMAGE_URI
          ' task-definition.json > updated-task-definition.json

    - name: Register the updated task definition
        id: register_task_definition
        run: |
          TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json file://updated-task-definition.json | jq -r '.taskDefinition.taskDefinitionArn')
          echo "TASK_DEFINITION_ARN=${TASK_DEFINITION_ARN}" >> $GITHUB_ENV

    - name: Update ECS service
        run: |
          aws ecs update-service --cluster ECS_07 --service Alter --task-definition ${{ env.TASK_DEFINITION_ARN }} --force-new-deployment

